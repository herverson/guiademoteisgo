// Mocks generated by Mockito 5.4.5 from annotations
// in guiademoteisgo/test/pages/motel_page_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter_bloc/flutter_bloc.dart' as _i6;
import 'package:guiademoteisgo/bloc/motel_cubit.dart' as _i4;
import 'package:guiademoteisgo/bloc/motel_state.dart' as _i3;
import 'package:guiademoteisgo/bloc/tab_cubit.dart' as _i7;
import 'package:guiademoteisgo/repositories/motel_repository.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMotelRepository_0 extends _i1.SmartFake
    implements _i2.MotelRepository {
  _FakeMotelRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeMotelState_1 extends _i1.SmartFake implements _i3.MotelState {
  _FakeMotelState_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [MotelCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockMotelCubit extends _i1.Mock implements _i4.MotelCubit {
  @override
  _i2.MotelRepository get motelRepository =>
      (super.noSuchMethod(
            Invocation.getter(#motelRepository),
            returnValue: _FakeMotelRepository_0(
              this,
              Invocation.getter(#motelRepository),
            ),
            returnValueForMissingStub: _FakeMotelRepository_0(
              this,
              Invocation.getter(#motelRepository),
            ),
          )
          as _i2.MotelRepository);

  @override
  _i3.MotelState get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: _FakeMotelState_1(this, Invocation.getter(#state)),
            returnValueForMissingStub: _FakeMotelState_1(
              this,
              Invocation.getter(#state),
            ),
          )
          as _i3.MotelState);

  @override
  _i5.Stream<_i3.MotelState> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<_i3.MotelState>.empty(),
            returnValueForMissingStub: _i5.Stream<_i3.MotelState>.empty(),
          )
          as _i5.Stream<_i3.MotelState>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Future<void> fetchMoteis() =>
      (super.noSuchMethod(
            Invocation.method(#fetchMoteis, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);

  @override
  void emit(_i3.MotelState? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<_i3.MotelState>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}

/// A class which mocks [TabStateCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockTabStateCubit extends _i1.Mock implements _i7.TabStateCubit {
  @override
  bool get state =>
      (super.noSuchMethod(
            Invocation.getter(#state),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i5.Stream<bool> get stream =>
      (super.noSuchMethod(
            Invocation.getter(#stream),
            returnValue: _i5.Stream<bool>.empty(),
            returnValueForMissingStub: _i5.Stream<bool>.empty(),
          )
          as _i5.Stream<bool>);

  @override
  bool get isClosed =>
      (super.noSuchMethod(
            Invocation.getter(#isClosed),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void toggleTab(int? index) => super.noSuchMethod(
    Invocation.method(#toggleTab, [index]),
    returnValueForMissingStub: null,
  );

  @override
  void emit(bool? state) => super.noSuchMethod(
    Invocation.method(#emit, [state]),
    returnValueForMissingStub: null,
  );

  @override
  void onChange(_i6.Change<bool>? change) => super.noSuchMethod(
    Invocation.method(#onChange, [change]),
    returnValueForMissingStub: null,
  );

  @override
  void addError(Object? error, [StackTrace? stackTrace]) => super.noSuchMethod(
    Invocation.method(#addError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  void onError(Object? error, StackTrace? stackTrace) => super.noSuchMethod(
    Invocation.method(#onError, [error, stackTrace]),
    returnValueForMissingStub: null,
  );

  @override
  _i5.Future<void> close() =>
      (super.noSuchMethod(
            Invocation.method(#close, []),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
